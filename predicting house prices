# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

# Load dataset (assuming you have a CSV file named 'house_prices.csv')
# The dataset should contain columns like 'bedrooms', 'square_footage', and 'price'
data = pd.read_csv('house_prices.csv')

# Display the first few rows of the dataset
print("Dataset Preview:")
print(data.head())

# Display dataset statistics
print("\nDataset Statistics:")
print(data.describe())

# Check for missing values
print("\nMissing Values:")
print(data.isnull().sum())

# Handling missing values (if any)
# For simplicity, we can drop rows with missing values
data = data.dropna()

# Features and target variable
X = data[['bedrooms', 'square_footage']]
y = data['price']

# Standardizing the features (scaling)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"\nModel Performance:")
print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (RÂ²): {r2}")

# Visualizing the actual vs predicted prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linewidth=2)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.show()

# Residual plot
residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
plt.scatter(y_pred, residuals, color='blue', alpha=0.6)
plt.hlines(y=0, xmin=min(y_pred), xmax=max(y_pred), color='red', linewidth=2)
plt.xlabel('Predicted Prices')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.show()

# Distribution of residuals
plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True, color='blue')
plt.title('Distribution of Residuals')
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.show()

# Output model coefficients
print("\nModel Coefficients:")
print(f"Intercept: {model.intercept_}")
print(f"Coefficients: {model.coef_}")

# Save the model to a file
joblib.dump(model, 'house_price_model.pkl')
print("\nModel saved to 'house_price_model.pkl'")

# Save the scaler to a file
joblib.dump(scaler, 'scaler.pkl')
print("Scaler saved to 'scaler.pkl'")

# Load the model and scaler from files (for future use)
# model = joblib.load('house_price_model.pkl')
# scaler = joblib.load('scaler.pkl')

# Predicting new data (example)
# new_data = np.array([[3, 2000]])  # New data: 3 bedrooms, 2000 square feet
# new_data_scaled = scaler.transform(new_data)
# new_prediction = model.predict(new_data_scaled)
# print(f"Predicted price for new data: {new_prediction[0]}") 
